{
  "name": "mongoose-relationship",
  "version": "0.0.5",
  "description": "mongoose plugin to create maintain one-many and many-many bidirectional relationships between two schemas",
  "main": "index.js",
  "scripts": {
    "test": "mocha"
  },
  "keywords": [
    "mongoose",
    "parent"
  ],
  "author": {
    "name": "Mike Sabatini",
    "email": "mike@parallelboxes.com"
  },
  "license": "MIT",
  "dependencies": {
    "underscore": "1.5.x",
    "async": "0.2.x"
  },
  "devDependencies": {
    "mocha": "1.14.x",
    "should": "3.1.x",
    "mongoose": "3.8.x"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/sabymike/mongoose-relationship"
  },
  "readme": "## mongoose-relationship\n\nA mongoose plugin that creates and manages relationships between two separate models. These relationships can be One-To-One, One-To-Many, or Many-To-Many. These changes are currently one-direction. If you manipulate a parents \"child\" property or collection, the child values will not be updated. Only changes made to the child model will update its parent.\n\n#Install\nInstall via NPM\n\n        npm install mongoose-relationship\n\n# Usage\n\n##One-To-Many\n```\nvar mongoose = require(\"mongoose\"),\n    Schema = mongoose.Schema,\n    relationship = require(\"mongoose-relationship\");\n\nvar ParentSchema = new mongoose.Schema({\n    children:[{ type:Schema.ObjectId, ref:\"Child\" }]\n});\nvar Parent = mongoose.models(\"Parent\", ParentSchema);\n\nvar ChildSchema = new mongoose.Schema({\n    parent: { type:Schema.ObjectId, ref:\"Parent\", childPath:\"children\" }\n});\nCarSchema.plugin(relationship, { relationshipPathName:'parent' });\nvar Child = mongoose.models(\"Child\", ChildSchema)\n\nvar parent = new Parent({});\nparent.save();\nvar child = new Child({parent:parent._id});\nchild.save() //the parent children property will now contain child's id\nchild.remove() //the parent children property will no longer contain the child's id\n```\n\n##Many-To-Many\n```\nvar mongoose = require(\"mongoose\"),\n    Schema = mongoose.Schema,\n    relationship = require(\"mongoose-relationship\");\n\nvar ParentSchema = new mongoose.Schema({\n    children:[{ type:Schema.ObjectId, ref:\"Child\" }]\n});\nvar Parent = mongoose.models(\"Parent\", ParentSchema);\n\nvar ChildSchema = new mongoose.Schema({\n    parents: [{ type:Schema.ObjectId, ref:\"Parent\", childPath:\"children\" }]\n});\nCarSchema.plugin(relationship, { relationshipPathName:'parents' });\nvar Child = mongoose.models(\"Child\", ChildSchema)\n\nvar parent = new Parent({});\nparent.save();\nvar parentTwo = new Parent({});\nparentTwo.save();\n\nvar child = new Child({});\nchild.parents.push(parent);\nchild.parents.push(parentTwo);\nchild.save() //both parent and parentTwo children property will now contain the child's id\nchild.remove() //both parent and parentTwo children property will no longer contain the child's id\n```\n\n##Many-To-Many with Multiple paths\n```\nvar mongoose = require(\"mongoose\"),\n    Schema = mongoose.Schema,\n    relationship = require(\"mongoose-relationship\");\n\nvar ParentSchema = new mongoose.Schema({\n    children:[{ type:Schema.ObjectId, ref:\"Child\" }]\n});\nvar Parent = mongoose.models(\"Parent\", ParentSchema);\n\nvar OtherParentSchema = new mongoose.Schema({\n    children:[{ type:Schema.ObjectId, ref:\"Child\" }]\n});\nvar OtherParent = mongoose.models(\"OtherParent\", OtherParentSchema);\n\nvar ChildSchema = new mongoose.Schema({\n    parents: [{ type:Schema.ObjectId, ref:\"Parent\", childPath:\"children\" }]\n    otherParents: [{ type:Schema.ObjectId, ref:\"OtherParent\", childPath:\"children\" }]\n});\nCarSchema.plugin(relationship, { relationshipPathName:['parents', 'otherParents'] });\nvar Child = mongoose.models(\"Child\", ChildSchema)\n\nvar parent = new Parent({});\nparent.save();\nvar otherParent = new OtherParent({});\notherParent.save();\n\nvar child = new Child({});\nchild.parents.push(parent);\nchild.otherParents.push(otherParent);\nchild.save() //both parent and otherParent children property will now contain the child's id\nchild.remove() //both parent and otherParent children property will no longer contain the child's id\n```\n\n##One-To-One\n**This usage scenario will overwrite the parent's field of multiple children are assigned the same parent. The use case for this operation seems to be limited and only included for a sense of completion.**\n\n```\nvar mongoose = require(\"mongoose\"),\n    Schema = mongoose.Schema,\n    relationship = require(\"mongoose-relationship\");\n\nvar ParentSchema = new mongoose.Schema({\n    child:{ type:Schema.ObjectId, ref:\"Child\" }\n});\nvar Parent = mongoose.models(\"Parent\", ParentSchema);\n\nvar ChildSchema = new mongoose.Schema({\n    parent: { type:Schema.ObjectId, ref:\"Parent\", childPath:\"child\" }\n});\nCarSchema.plugin(relationship, { relationshipPathName:'parent' });\nvar Child = mongoose.models(\"Child\", ChildSchema)\n\nvar parent = new Parent({});\nparent.save();\nvar child = new Child({parent:parent._id});\nchild.save() // The parent's child property will now be set to the child's _id;\nchild.remove() // The parent's child property will now be unset\n```\n\n###Options\n\n####Plugin\nThe plugin currently has the following options\n\n- **relationshipPathName**\n\n    A string or array to let the plugin know which path(s) on your schema the relationship will be created. Defaults to **relationship**\n\n####Path Value\nWhen creating a path on a schema that will represent the relationship, the childPath option is required\n\n- **childPath**\n\n    A string which should match an existing path in target ref schema. If this path does not exist the plugin will have no affect on the target ref.\n\n# Tests\nTest can be run simply by installing and running mocha\n\n    npm install -g mocha\n    mocha\n\n#Authors\nMike Sabatini [@mikesabatini](https://twitter.com/mikesabatini)\n\n#License\nCopyright Mike Sabatini 2014\nLicensed under the MIT License. Enjoy",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/sabymike/mongoose-relationship/issues"
  },
  "homepage": "https://github.com/sabymike/mongoose-relationship",
  "_id": "mongoose-relationship@0.0.5",
  "_shasum": "63308519061552b3e4e46f4ae7676d3661437203",
  "_from": "mongoose-relationship@",
  "_resolved": "https://registry.npmjs.org/mongoose-relationship/-/mongoose-relationship-0.0.5.tgz"
}
